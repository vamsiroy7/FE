import pandas as pd
import numpy as np
from io import StringIO

# Sample dataset including multiple variables
data = """
score_bins,cure15,count,var,Date
A,0,100,Variable1,2021-01
A,1,20,Variable1,2021-01
B,0,150,Variable1,2021-01
B,1,30,Variable1,2021-01
C,0,200,Variable1,2021-01
C,1,50,Variable1,2021-01
A,0,110,Variable1,2022-01
A,1,25,Variable1,2022-01
B,0,160,Variable1,2022-01
B,1,35,Variable1,2022-01
C,0,210,Variable1,2022-01
C,1,55,Variable1,2022-01
A,0,90,Variable2,2021-01
A,1,15,Variable2,2021-01
B,0,140,Variable2,2021-01
B,1,25,Variable2,2021-01
C,0,190,Variable2,2021-01
C,1,45,Variable2,2021-01
A,0,95,Variable2,2022-01
A,1,20,Variable2,2022-01
B,0,155,Variable2,2022-01
B,1,30,Variable2,2022-01
C,0,205,Variable2,2022-01
C,1,50,Variable2,2022-01
"""

# Load the sample dataset into a pandas DataFrame
df = pd.read_csv(StringIO(data))

# Create a function to calculate IV
def calculate_iv(df, var):
    pivot_table = df[df['var'] == var].pivot_table(index='score_bins', columns='Date', values='count', aggfunc='sum')

    # Calculate total events and nonevents for each Date
    total_events = df[(df['var'] == var) & (df['cure15'] == 0)].groupby('Date')['count'].sum()
    total_nonevents = df[(df['var'] == var) & (df['cure15'] == 1)].groupby('Date')['count'].sum()

    # Initialize DataFrame to store IV
    iv_df = pd.DataFrame(index=[var])

    for date in pivot_table.columns:
        events_per_bin = df[(df['var'] == var) & (df['Date'] == date) & (df['cure15'] == 0)].groupby('score_bins')['count'].sum()
        nonevents_per_bin = df[(df['var'] == var) & (df['Date'] == date) & (df['cure15'] == 1)].groupby('score_bins')['count'].sum()
        
        events_per_bin = events_per_bin.fillna(0)
        nonevents_per_bin = nonevents_per_bin.fillna(0)
        
        # To avoid division by zero, adding a small value (e.g., 1e-10)
        events_per_bin = events_per_bin + 1e-10
        nonevents_per_bin = nonevents_per_bin + 1e-10
        
        # Calculate WoE (non-events / events)
        woe = np.log((nonevents_per_bin / total_nonevents[date]) / (events_per_bin / total_events[date]))
        
        # Calculate IV for each bin and date
        iv = (nonevents_per_bin / total_nonevents[date] - events_per_bin / total_events[date]) * woe
        iv_df[f'{date}'] = iv.sum()

    iv_df.reset_index(inplace=True)
    iv_df.columns = ['var'] + list(iv_df.columns[1:])
    
    return iv_df

# Calculate IV for each var
vars = df['var'].unique()
all_iv = []

for var in vars:
    iv_df = calculate_iv(df, var)
    all_iv.append(iv_df)

# Concatenate all IV dataframes into one, removing duplicates and gaps
combined_iv = pd.concat(all_iv).drop_duplicates().reset_index(drop=True)

# Display the combined IV DataFrame
print(combined_iv)
