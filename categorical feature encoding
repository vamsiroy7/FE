from sklearn.preprocessing import OneHotEncoder
import pandas as pd
import numpy as np

def encode_categorical_features(df, cat_cols, target_col=None):
    """
    Apply various encodings to categorical columns in a DataFrame, including one-hot encoding, 
    count frequency encoding, mean encoding, and weight of evidence (WOE). Treats null values 
    in categorical columns as a specific category ("Missing").

    Args:
    - df (DataFrame): The input DataFrame.
    - cat_cols (list): List of categorical column names to be encoded.
    - target_col (str, optional): The target column name for mean and WOE encoding.

    Returns:
    - DataFrame: The DataFrame with encoded features.
    - dict: Dictionary with lists of new column names for each encoding method.
    """
    # Initialize OneHotEncoder
    encoder = OneHotEncoder()
    new_columns_info = {}

    for col in cat_cols:
        # Fill null values with a string to represent missing data
        df[col].fillna('Missing', inplace=True)

        # Perform one-hot encoding
        one_hot_encoded = encoder.fit_transform(df[[col]])
        one_hot_encoded_df = pd.DataFrame(one_hot_encoded.toarray(), columns=encoder.get_feature_names_out([col]))
        df = pd.concat([df.drop(col, axis=1), one_hot_encoded_df], axis=1)
        new_columns_info[col + '_one_hot'] = list(one_hot_encoded_df.columns)

        # Perform count frequency encoding
        counts = df[col].value_counts().to_dict()
        df[col + '_count'] = df[col].map(counts)
        new_columns_info[col + '_count'] = [col + '_count']

        if target_col:
            # Perform mean encoding
            mean_values = df.groupby(col)[target_col].mean()
            df[col + '_mean_encoded'] = df[col].map(mean_values)
            new_columns_info[col + '_mean'] = [col + '_mean_encoded']

            # Perform WOE encoding
            total_good = df[target_col].value_counts()[0]  # Assuming 0 is good label
            total_bad = df[target_col].value_counts()[1]  # Assuming 1 is bad label
            category_counts = df.groupby(col)[target_col].value_counts().unstack().fillna(0)
            category_counts['good_prop'] = category_counts[0] / total_good
            category_counts['bad_prop'] = category_counts[1] / total_bad
            category_counts['good_prop'] = category_counts['good_prop'].replace(0, np.nan).fillna(0)
            category_counts['bad_prop'] = category_counts['bad_prop'].replace(0, np.nan).fillna(0)
            category_counts['woe'] = np.log(category_counts['good_prop'] / category_counts['bad_prop'].replace(0, np.nan))
            woe_dict = category_counts['woe'].to_dict()
            df[col + '_woe'] = df[col].map(woe_dict)
            new_columns_info[col + '_woe'] = [col + '_woe']

    return df, new_columns_info









import pandas as pd

# Sample data creation
data = {
    'education_level': ['Bachelor', 'Master', 'PhD', 'High School', None, 'Bachelor', 'Master', 'PhD'],
    'marital_status': ['Married', 'Single', 'Single', 'Married', 'Divorced', 'Divorced', None, 'Married'],
    'job_type': ['Salaried', 'Self-employed', 'Unemployed', 'Salaried', 'Self-employed', 'Unemployed', 'Salaried', None],
    'default': [0, 1, 0, 1, 0, 1, 0, 1]
}

df = pd.DataFrame(data)

# List of categorical columns
cat_cols = ['education_level', 'marital_status', 'job_type']

# The target column
target_col = 'default'

# Applying the encoding function
encoded_df, new_columns_info = encode_categorical_features(df, cat_cols, target_col)

# Print the resulting DataFrame and new columns info
print(encoded_df)
print("\nNew columns information:", new_columns_info)
